Source: imediff
Section: text
Priority: optional
Maintainer: Osamu Aoki <osamu@debian.org>
Build-Depends: debhelper-compat (= 13),
               dh-python,
               python3-all,
               python3-distutils-extra,
               python3-setuptools
Standards-Version: 4.5.1
VCS-Git: https://github.com/osamuaoki/imediff.git -b main
Vcs-Browser: https://github.com/osamuaoki/imediff
Homepage: https://github.com/osamuaoki/imediff

Package: imediff
Architecture: all
Depends: ${misc:Depends}, ${python3:Depends}, vim | emacs | editor
Recommends: git
Provides: imediff2
Breaks: imediff2 (<< 1.1.2.1-3)
Replaces: imediff2 (<< 1.1.2.1-3)
Description: interactive full screen 2/3-way merge tool
 The imediff command helps you to merge 2 slightly different files with
 an optional base file interactively using the in-place alternating
 display of the changed content on a single-pane full screen terminal
 user interface.
 .
 The source of line is clearly identified by the color of the line or the
 identifier character at the first column.
 .
 The advantage of this user interface is the minimal movement of the line
 of sight for the user.
 .
 The automatic merge logic of the imediff command operates not only on
 the difference by line but on the difference by character.  This is
 another great feature of the imediff command. So for the non-overlapping
 changes, it always yields the clean merge.
 .
 The "git ime" command helps you to merge 2 slightly different file trees
 committed to the consecutive commits (`HEAD^`, `HEAD`) of a git
 repository while using "git rebase -i <treeish>" and gitk as helper to
 select changes.
 .
 If any staged changes or local uncommitted changes are found in the git
 repository, "git ime" immediately exits without changes to be on the
 safe side.
 .
 If the latest commit involves multiple files, this big commit is split
 by the file into multiple smaller commits involving a single file.
 .
 If the latest commit involves only a single file, the commit is split
 into multiple smaller commits involving a set of meaningful partial
 changes by imediff and managed interactively.
 .
 This "git ime" is not only useful at the checked out branch head but
 also at "edit" prompt during the interactive execution of "git rebase -i
 <treeish>".
